name: C++ CI

on: [ push, pull_request ]

jobs:
  build:
    runs-on: self-hosted
    env:
      DBG_PREFIX: /fs/ess/PAS0350/geng/.cache/grpc_dbg
      REL_PREFIX: /fs/ess/PAS0350/geng/.cache/grpc_rel
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Allocate Nodes
        id: alloc_nodes
        run: |
          pushd examples/cpp/micro-bench/launcher
          srun --account=PAS0350 --nodes=2 --ntasks-per-node=1 --cpus-per-task=8 --partition=debug --job-name=rpc_ci sleep 7200 &
          # Wait allocation done
          while ! squeue -n rpc_ci --long -u $USER | grep -q "RUNNING"; do
              sleep 1
          done
          squeue -n rpc_ci -u $USER -o %N | tail -n 1 | xargs ./helper.sh
          CI_SERVER=$(head -n 1 hosts)
          echo "##[set-output name=ci_server;]$CI_SERVER"
          popd

#      - name: Prepare Dependencies
#        run: |
#          CI_SERVER="${{ steps.alloc_nodes.outputs.ci_server }}"
#          echo "CI server is: $CI_SERVER"
#
#          rm -rf $DBG_PREFIX $REL_PREFIX && mkdir -p $DBG_PREFIX $REL_PREFIX
#          pushd third_party/abseil-cpp
#          # Build absel in debug mode
#          rm -rf debug && mkdir debug
#          pushd debug
#          cmake .. -DCMAKE_INSTALL_PREFIX=$DBG_PREFIX -DCMAKE_BUILD_TYPE=Debug
#          ssh $CI_SERVER "cd $(pwd) && make -j install"
#          popd
#
#          # Build absel in release mode
#          rm -rf release && mkdir release
#          pushd release
#          cmake .. -DCMAKE_INSTALL_PREFIX=$REL_PREFIX -DCMAKE_BUILD_TYPE=Release
#          ssh $CI_SERVER "cd $(pwd) && make -j install"
#          popd
#          popd
#
#          rm -rf HdrHistogram_c && git clone https://github.com/HdrHistogram/HdrHistogram_c.git
#          pushd HdrHistogram_c
#          rm -rf debug && mkdir debug
#          pushd debug
#          cmake .. -DCMAKE_INSTALL_PREFIX=$DBG_PREFIX -DCMAKE_BUILD_TYPE=Debug
#          ssh $CI_SERVER "cd $(pwd) && make -j install"
#          popd
#
#          rm -rf release && mkdir release
#          pushd release
#          cmake .. -DCMAKE_INSTALL_PREFIX=$REL_PREFIX -DCMAKE_BUILD_TYPE=Release
#          ssh $CI_SERVER "cd $(pwd) && make -j install"
#          popd
#          popd

#      - name: Build gRPC
#        run: |
#          CI_SERVER="${{ steps.alloc_nodes.outputs.ci_server }}"
#
#          rm -rf debug && mkdir debug
#          pushd debug
#          cmake .. -DCMAKE_INSTALL_PREFIX=$DBG_PREFIX -DCMAKE_BUILD_TYPE=Debug
#          ssh $CI_SERVER "cd $(pwd) && make -j install"
#          popd
#
#          rm -rf release && mkdir release
#          pushd release
#          cmake .. -DCMAKE_INSTALL_PREFIX=$REL_PREFIX -DCMAKE_BUILD_TYPE=Release
#          ssh $CI_SERVER "cd $(pwd) && make -j install"
#          popd


#      - name: Build Test
#        run: |
#          CI_SERVER="${{ steps.alloc_nodes.outputs.ci_server }}"
#
#          pushd examples/cpp/test
#          rm -rf debug && mkdir debug
#          pushd debug
#          PATH=$DBG_PREFIX/bin:$PATH cmake .. -DCMAKE_PREFIX_PATH=$DBG_PREFIX
#          ssh $CI_SERVER "cd $(pwd) && make -j"
#          popd
#
#          rm -rf release && mkdir release
#          pushd release
#          PATH=$REL_PREFIX/bin:$PATH cmake .. -DCMAKE_PREFIX_PATH=$REL_PREFIX
#          ssh $CI_SERVER "cd $(pwd) && make -j"
#          popd
#          popd
#
#      - name: Test Debug
#        timeout-minutes: 10
#        run: |
#          CI_SERVER="${{ steps.alloc_nodes.outputs.ci_server }}"
#
#          pushd examples/cpp/test
#          ssh $CI_SERVER "cd $(pwd) && $GITHUB_WORKSPACE/.github/workflows/run_all_variants.sh ./test.sh --test-client=./debug"
#          ssh $CI_SERVER "cd $(pwd) && $GITHUB_WORKSPACE/.github/workflows/run_all_variants.sh ./test.sh --test-async-client=./debug"
#          ssh $CI_SERVER "cd $(pwd) && $GITHUB_WORKSPACE/.github/workflows/run_all_variants.sh ./test.sh --test-async-client2=./debug"
#          popd
#
#      - name: Test Release
#        timeout-minutes: 10
#        run: |
#          CI_SERVER="${{ steps.alloc_nodes.outputs.ci_server }}"
#
#          pushd examples/cpp/test
#          ssh $CI_SERVER "cd $(pwd) && $GITHUB_WORKSPACE/.github/workflows/run_all_variants.sh ./test.sh --test-client=./release"
#          ssh $CI_SERVER "cd $(pwd) && $GITHUB_WORKSPACE/.github/workflows/run_all_variants.sh ./test.sh --test-async-client=./release"
#          ssh $CI_SERVER "cd $(pwd) && $GITHUB_WORKSPACE/.github/workflows/run_all_variants.sh ./test.sh --test-async-client2=./release"
#          popd

      - name: Build Micro-bench
        run: |
          CI_SERVER="${{ steps.alloc_nodes.outputs.ci_server }}"

          pushd examples/cpp/micro-bench
          rm -rf debug && mkdir debug
          pushd debug
          PATH=$DBG_PREFIX/bin:$PATH cmake .. -DCMAKE_PREFIX_PATH=$DBG_PREFIX
          ssh $CI_SERVER "cd $(pwd) && make -j"
          popd

          rm -rf release && mkdir release
          pushd release
          PATH=$REL_PREFIX/bin:$PATH cmake .. -DCMAKE_PREFIX_PATH=$REL_PREFIX
          ssh $CI_SERVER "cd $(pwd) && make -j"
          popd
          popd

      - name: Micro-bench Debug
        timeout-minutes: 20
        run: |
          pushd examples/cpp/micro-bench/launcher
          rm -rf ./log
          MB_HOME="$PWD/../debug" ./run-all.sh --throughput
          popd

      - name: Micro-bench Release
        timeout-minutes: 20
        run: |
          pushd examples/cpp/micro-bench/launcher
          rm -rf ./log
          MB_HOME="$PWD/../release" ./run-all.sh --throughput
          popd

      - name: Cleanup
        if: failure() || success()
        run: |
          squeue -n rpc_ci -u $USER -o %A -h | xargs scancel || true